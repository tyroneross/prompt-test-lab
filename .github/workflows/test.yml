name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run API unit tests
        run: npm run test --workspace=@prompt-lab/api
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-key-for-ci-only
          DATABASE_URL: file:./test.db
      
      - name: Run Frontend unit tests
        run: npm run test:coverage --workspace=@prompt-lab/web
      
      - name: Upload API coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/api/coverage/lcov.info
          flags: api
          name: api-coverage
      
      - name: Upload Frontend coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: promptlab_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database
        run: npm run db:init --workspace=@prompt-lab/api
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/promptlab_test
          NODE_ENV: test
      
      - name: Run integration tests
        run: npm test -- --testPathPattern=integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/promptlab_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-ci-only

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: promptlab_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Setup test database
        run: npm run db:init --workspace=@prompt-lab/api
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/promptlab_test
          NODE_ENV: test
      
      - name: Start application servers
        run: |
          npm run dev:api &
          npm run dev:web &
          sleep 30
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/promptlab_test
          JWT_SECRET: test-jwt-secret-key-for-ci-only
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173
          API_BASE_URL: http://localhost:3001
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level moderate
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Start application servers
        run: |
          npm run dev:api &
          npm run dev:web &
          sleep 30
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-jwt-secret-key-for-ci-only
      
      - name: Run security tests
        run: npx playwright test tests/security/
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173
          API_BASE_URL: http://localhost:3001

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Start application servers
        run: |
          npm run dev:api &
          npm run dev:web &
          sleep 30
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-jwt-secret-key-for-ci-only
      
      - name: Run performance tests
        run: npx playwright test tests/performance/
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173
          API_BASE_URL: http://localhost:3001
      
      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-reports
          path: lighthouse-reports/
          retention-days: 30

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Start application servers
        run: |
          npm run dev:api &
          npm run dev:web &
          sleep 30
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-jwt-secret-key-for-ci-only
      
      - name: Run accessibility tests
        run: npx playwright test tests/accessibility/
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173
          API_BASE_URL: http://localhost:3001

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests, performance-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate test summary
        run: |
          echo "# Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports are available in the artifacts section." >> $GITHUB_STEP_SUMMARY
      
      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Unit Tests': '${{ needs.unit-tests.result }}',
              'Integration Tests': '${{ needs.integration-tests.result }}',
              'E2E Tests': '${{ needs.e2e-tests.result }}',
              'Security Tests': '${{ needs.security-tests.result }}',
              'Performance Tests': '${{ needs.performance-tests.result }}',
              'Accessibility Tests': '${{ needs.accessibility-tests.result }}'
            };
            
            const passed = Object.values(results).filter(r => r === 'success').length;
            const total = Object.keys(results).length;
            
            let body = `## 🧪 Test Results\n\n`;
            body += `**${passed}/${total} test suites passed**\n\n`;
            
            for (const [test, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⚠️';
              body += `${emoji} ${test}: ${result}\n`;
            }
            
            if (passed === total) {
              body += `\n🎉 All tests passed! This PR is ready for review.`;
            } else {
              body += `\n⚠️  Some tests failed. Please review the failed tests before merging.`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });